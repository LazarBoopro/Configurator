/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

import * as THREE from "three";
import { useGLTF } from "@react-three/drei";
import { GLTF } from "three-stdlib";
import useTextures from "../../hooks/useTextures.hook";

type GLTFResult = GLTF & {
    nodes: {
        Zid: THREE.Mesh;
        LeviStub: THREE.Mesh;
        LeviStubCap: THREE.Mesh;
        DesniStubCap: THREE.Mesh;
        DesniStub: THREE.Mesh;
        Vrh: THREE.Mesh;
        postolje: THREE.Mesh;
        Zid001: THREE.Mesh;
        Vrh001: THREE.Mesh;
        postolje001: THREE.Mesh;
        LeviStubCap001: THREE.Mesh;
        LeviStub001: THREE.Mesh;
        Zid002: THREE.Mesh;
        Vrh002: THREE.Mesh;
        postolje002: THREE.Mesh;
        LeviStubCap002: THREE.Mesh;
        LeviStub002: THREE.Mesh;
        Zid003: THREE.Mesh;
        Vrh003: THREE.Mesh;
        postolje003: THREE.Mesh;
        LeviStubCap003: THREE.Mesh;
        LeviStub003: THREE.Mesh;
        Plane: THREE.Mesh;
    };
    materials: {
        ["Material.001"]: THREE.MeshStandardMaterial;
        ["Metal Facade Aged"]: THREE.MeshPhysicalMaterial;
        ["Material.002"]: THREE.MeshStandardMaterial;
        ["Material.003"]: THREE.MeshStandardMaterial;
        ["Material.004"]: THREE.MeshStandardMaterial;
        ["Concrete Pavement Tiles"]: THREE.MeshStandardMaterial;
    };
};

export default function Model(props: JSX.IntrinsicElements["group"]) {
    const { nodes, materials } = useGLTF("/models/scenaTest.glb") as GLTFResult;

    const { selectedTextureWall } = useTextures();

    const t = () => {
        return (
            <meshStandardMaterial
                {...selectedTextureWall}
                roughness={1.5}
                // envMapIntensity={100}
                side={THREE.DoubleSide}
                metalness={0}
                // emissiveIntensity={200000}
            />
        );
    };

    return (
        <group {...props} dispose={null}>
            <mesh
                castShadow
                receiveShadow
                geometry={nodes.Zid.geometry}
                material={materials["Material.001"]}
                position={[1.549, 0.415, 0]}
            >
                {t()}
            </mesh>
            <mesh
                castShadow
                receiveShadow
                geometry={nodes.LeviStub.geometry}
                material={materials["Metal Facade Aged"]}
                position={[1.03, 0.432, 0]}
            />
            <mesh
                castShadow
                receiveShadow
                geometry={nodes.LeviStubCap.geometry}
                material={materials["Metal Facade Aged"]}
                position={[1.03, 0.432, 0]}
            />
            <mesh
                castShadow
                receiveShadow
                geometry={nodes.DesniStubCap.geometry}
                material={materials["Metal Facade Aged"]}
                position={[2.059, 0.432, 0]}
            />
            <mesh
                castShadow
                receiveShadow
                geometry={nodes.DesniStub.geometry}
                material={materials["Metal Facade Aged"]}
                position={[2.059, 0.432, 0]}
            />
            <mesh
                castShadow
                receiveShadow
                geometry={nodes.Vrh.geometry}
                material={materials["Metal Facade Aged"]}
                position={[1.547, 0.8, 0]}
            />
            <mesh
                castShadow
                receiveShadow
                geometry={nodes.postolje.geometry}
                material={materials["Metal Facade Aged"]}
                position={[1.547, 0.006, 0]}
            />
            <mesh
                castShadow
                receiveShadow
                geometry={nodes.Zid001.geometry}
                material={materials["Material.002"]}
                position={[0.523, 0.415, 0]}
            >
                {t()}
            </mesh>
            <mesh
                castShadow
                receiveShadow
                geometry={nodes.Vrh001.geometry}
                material={materials["Metal Facade Aged"]}
                position={[0.521, 0.8, 0]}
            />
            <mesh
                castShadow
                receiveShadow
                geometry={nodes.postolje001.geometry}
                material={materials["Metal Facade Aged"]}
                position={[0.521, 0.006, 0]}
            />
            <mesh
                castShadow
                receiveShadow
                geometry={nodes.LeviStubCap001.geometry}
                material={materials["Metal Facade Aged"]}
                position={[0.005, 0.432, 0]}
            />
            <mesh
                castShadow
                receiveShadow
                geometry={nodes.LeviStub001.geometry}
                material={materials["Metal Facade Aged"]}
                position={[0.005, 0.432, 0]}
            />
            <mesh
                castShadow
                receiveShadow
                geometry={nodes.Zid002.geometry}
                material={materials["Material.003"]}
                position={[-0.522, 0.415, 0]}
            >
                {t()}
            </mesh>
            <mesh
                castShadow
                receiveShadow
                geometry={nodes.Vrh002.geometry}
                material={materials["Metal Facade Aged"]}
                position={[-0.521, 0.8, 0]}
            />
            <mesh
                castShadow
                receiveShadow
                geometry={nodes.postolje002.geometry}
                material={materials["Metal Facade Aged"]}
                position={[-0.524, 0.006, 0]}
            />
            <mesh
                castShadow
                receiveShadow
                geometry={nodes.LeviStubCap002.geometry}
                material={materials["Metal Facade Aged"]}
                position={[-1.04, 0.432, 0]}
            />
            <mesh
                castShadow
                receiveShadow
                geometry={nodes.LeviStub002.geometry}
                material={materials["Metal Facade Aged"]}
                position={[-1.04, 0.432, 0]}
            />
            <mesh
                castShadow
                receiveShadow
                geometry={nodes.Zid003.geometry}
                material={materials["Material.004"]}
                position={[-1.56, 0.415, 0]}
            >
                {t()}
            </mesh>
            <mesh
                castShadow
                receiveShadow
                geometry={nodes.Vrh003.geometry}
                material={materials["Metal Facade Aged"]}
                position={[-1.554, 0.8, 0]}
            />
            <mesh
                castShadow
                receiveShadow
                geometry={nodes.postolje003.geometry}
                material={materials["Metal Facade Aged"]}
                position={[-1.563, 0.006, 0]}
            />
            <mesh
                castShadow
                receiveShadow
                geometry={nodes.LeviStubCap003.geometry}
                material={materials["Metal Facade Aged"]}
                position={[-2.079, 0.432, 0]}
            />
            <mesh
                castShadow
                receiveShadow
                geometry={nodes.LeviStub003.geometry}
                material={materials["Metal Facade Aged"]}
                position={[-2.079, 0.432, 0]}
            />
            <mesh
                castShadow
                receiveShadow
                geometry={nodes.Plane.geometry}
                material={materials["Concrete Pavement Tiles"]}
                position={[0.015, 0.001, 0.605]}
            />
            {/* <directionalLight
        intensity={2199.26}
        decay={2}
        position={[-4.469, 2.409, 3.482]}
        rotation={[-0.355, -0.555, -0.193]}
      /> */}
        </group>
    );
}

useGLTF.preload("/models/scenaTest.glb");
